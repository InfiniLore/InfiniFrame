@using InfiniLore.InfiniFrame.NET
@using Microsoft.AspNetCore.Components.Web

@namespace InfiniLore.Photino.Blazor

@inherits ComponentBase

@inject IPhotinoWindow PhotinoWindow


<div class="@Class window-button window-button-@(WindowAction.ToString().ToLower()) window-button-@GetOperatingSystem()"
     @onclick="@OnClick">
    <span class="window-icon">@((MarkupString)GetIcon())</span>
</div>

<!--suppress CssUnusedSymbol -->
<style>
    .window-button {
        width: 1.5em;
        min-height: 1em;
        max-height: 100%;
        line-height: 100%;
        border: none;
        background: transparent;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        text-align: justify-all;
        cursor: pointer;
        transition: all 0.2s ease;
        font-family: 'Segoe UI Symbol', 'Apple Color Emoji', sans-serif;
        font-size: 1.5em;
        color: #666;
        border-radius: 0;
    }

    /* Dark background support */
    @@media (prefers-color-scheme: dark) {
        .window-button {
            color: #ccc;
        }

        .window-button:hover {
            background-color: rgba(255, 255, 255, 0.1);
        }

        .window-button:active {
            background-color: rgba(255, 255, 255, 0.2);
        }

        .window-button-macos {
            border: 1px solid rgba(255, 255, 255, 0.3);
        }
    }

    .window-button:hover {
        background-color: rgba(0, 0, 0, 0.1);
    }

    .window-button:active {
        background-color: rgba(0, 0, 0, 0.2);
    }

    /* Windows-specific styles */
    .window-button-windows {
        font-family: 'Segoe MDL2 Assets', 'Segoe UI Symbol', sans-serif;
    }
    
    .window-button-windows:hover {
        background-color: rgba(0, 0, 0, 0.5);
        color: #666;
    }

    .window-button-windows.window-button-close:hover {
        background-color: #e81123;
        color: white;
    }

    .window-button-windows.window-button-maximize:hover,
    .window-button-windows.window-button-minimize:hover {
        background-color: rgba(0, 0, 0, 0.1);
    }

    @@media (prefers-color-scheme: dark) {
        .window-button-windows.window-button-maximize:hover,
        .window-button-windows.window-button-minimize:hover {
            background-color: rgba(255, 255, 255, 0.1);
        }
    }

    /* macOS-specific styles - Traffic Light Buttons */
    .window-button-macos {
        width: 12px;
        height: 12px;
        border-radius: 50%;
        border: 1px solid rgba(0, 0, 0, 0.2);
        margin: 0 4px;
        position: relative;
        box-shadow: inset 0 1px 1px rgba(255, 255, 255, 0.3),
        0 1px 2px rgba(0, 0, 0, 0.3);
    }

    .window-button-macos.window-button-close {
        background: linear-gradient(135deg, #ff6058 0%, #ff4842 100%);
    }

    .window-button-macos.window-button-minimize {
        background: linear-gradient(135deg, #ffbe30 0%, #ffac00 100%);
    }

    .window-button-macos.window-button-maximize {
        background: linear-gradient(135deg, #00ca56 0%, #00a946 100%);
    }

    .window-button-macos:hover {
        transform: scale(1.1);
        box-shadow: inset 0 1px 1px rgba(255, 255, 255, 0.4),
        0 2px 4px rgba(0, 0, 0, 0.4);
    }

    .window-button-macos:active {
        transform: scale(0.95);
    }

    /* Show symbols on hover for macOS */
    .window-button-macos::after {
        content: '';
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        font-size: 8px;
        font-weight: bold;
        opacity: 0;
        transition: opacity 0.2s ease;
        color: rgba(0, 0, 0, 0.6);
    }

    .window-button-macos:hover::after {
        opacity: 1;
    }

    .window-button-macos.window-button-close:hover::after {
        content: '×';
    }

    .window-button-macos.window-button-minimize:hover::after {
        content: '−';
    }

    .window-button-macos.window-button-maximize:hover::after {
        content: '+';
    }

    /* Linux-specific styles */
    .window-button-linux {
        font-family: 'Ubuntu', 'Liberation Sans', sans-serif;
        border-radius: 2px;
    }

    .window-button-linux.window-button-close:hover {
        background-color: #d32f2f;
        color: white;
    }

    .window-icon {
        pointer-events: none;
        user-select: none;
    
        display: inline-block;
        vertical-align: middle;
        line-height: 100%;
    }
</style>

@code {
    [EditorRequired, Parameter] public required WindowAction WindowAction { get; set; }
    [Parameter] public string? Class { get; set; } 


    private const string Windows = "windows";
    private const string MacOs = "macos";
    private const string Linux = "linux";

    private static string GetOperatingSystem() {
        if (OperatingSystem.IsWindows()) return Windows;
        if (OperatingSystem.IsMacOS()) return MacOs;

        return OperatingSystem.IsLinux() ? Linux : "unknown";
    }

    private string GetIcon() {
        string os = GetOperatingSystem();

        return WindowAction switch {
            WindowAction.Minimize => os switch {
                Windows => "&#x1F5D5;",// 🗕 (minimize symbol)
                Linux => "&#x2212;",// − (minus sign)
                _ => "&#x1F5D5;"
            },
            WindowAction.Maximize => os switch {
                Windows => "&#x1F5D6;",// 🗖 (maximize symbol)
                Linux => "&#x25A1;",// □ (square)
                _ => "&#x1F5D6;"
            },
            WindowAction.Close => os switch {
                Windows => "&#x2715;",// ✕ (multiplication X)
                Linux => "&#x2715;",// ✕ (multiplication X)
                _ => "&#x2715;"
            },
            _ => throw new ArgumentOutOfRangeException()
        };
    }

    private void OnClick(MouseEventArgs args) {
        switch (WindowAction) {

            case WindowAction.Minimize: {
                PhotinoWindow.SetMinimized(true);
                break;
            }

            case WindowAction.Maximize: {
                PhotinoWindow.ToggleMaximized();
                break;
            }

            case WindowAction.Close: {
                PhotinoWindow.Close();
                break;
            }

            default: throw new ArgumentOutOfRangeException();
        }
    }
}