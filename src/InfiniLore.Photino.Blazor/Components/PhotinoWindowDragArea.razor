@using InfiniLore.Photino.NET
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.Extensions.Logging
@using Microsoft.JSInterop

@namespace InfiniLore.Photino.Blazor

@inherits ComponentBase

@* ReSharper disable CSharpWarnings::CS8974 *@
<div
    @ref="_dragArea"
    onpointerdown:preventDefault
    onpointerdown="@OnPointerDown"
    onpointerup="@OnPointerUp"
    onpointermove="@OnPointerMove"
    @attributes="ExtraAttributes"
>
    @* ReSharper restore CSharpWarnings::CS8974 *@
    @ChildContent
</div>

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter(CaptureUnmatchedValues = true)] public Dictionary<string, object>? ExtraAttributes { get; set; }

    [Inject] public IPhotinoWindow PhotinoWindow { get; set; } = null!;
    [Inject] public ILogger<PhotinoWindowDragArea> Logger { get; set; } = null!;
    [Inject] public IJSRuntime JSRuntime { get; set; } = null!;

    private ElementReference _dragArea;

    private bool _isGrabbing;
    private bool _suppressRender;

    // ReSharper disable once InvertIf
    protected override bool ShouldRender() {
        if (!base.ShouldRender()) return false;
        
        // Reset every time to ensure we don't render until we're ready.
        if (_suppressRender) {
            _suppressRender = false;
            return false;
        }
        return true;
    }

    private async Task OnPointerDown(PointerEventArgs args) {
        _isGrabbing = true;
        _suppressRender = true;
        await JSRuntime.InvokeVoidAsync("setPointerCapture", _dragArea, args.PointerId);
    }

    private async Task OnPointerUp(PointerEventArgs args) {
        _isGrabbing = false;
        _suppressRender = true;
        await JSRuntime.InvokeVoidAsync("releasePointerCapture", _dragArea, args.PointerId);
    }

    private void OnPointerMove(PointerEventArgs args) {
        _suppressRender = true;
        if (!_isGrabbing) return;

        PhotinoWindow.Offset(args.MovementX, args.MovementY);
    }
}
