name: MultiPlatform Testing

on:
    workflow_dispatch:
        inputs:
            pr_number:
                description: 'PR number to test (use the PR number from the URL)'
                required: false
            run_windows:
                description: 'Run Windows GUI tests'
                type: boolean
                default: true
            run_windows_playwright:
                description: 'Run Windows Playwright tests'
                type: boolean
                default: false
            run_linux:
                description: 'Run Linux GUI tests'
                type: boolean
                default: false
            run_macos:
                description: 'Run macOS GUI tests'
                type: boolean
                default: false

jobs:
    mark-pending:
        name: Mark Manual CI as Pending
        runs-on: ubuntu-latest
        permissions:
            statuses: write
        steps:
            -   name: Set pending status
                env:
                    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                run: |
                    echo "Posting pending status for Manual MultiPlatform CI"
                    
                    # Construct the workflow url
                    WORKFLOW_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    
                    # Post status for Linux
                    curl -X POST \
                      -H "Authorization: Bearer $GITHUB_TOKEN" \
                      -H "Accept: application/vnd.github+json" \
                      https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }} \
                      -d "{\"state\":\"pending\",\"context\":\"Manual MultiPlatform CI - Linux\",\"description\":\"Linux tests\", \"target_url\": \"$WORKFLOW_URL\"}"

                    # Post status for Windows  
                    curl -X POST \
                      -H "Authorization: Bearer $GITHUB_TOKEN" \
                      -H "Accept: application/vnd.github+json" \
                      https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }} \
                      -d "{\"state\":\"pending\",\"context\":\"Manual MultiPlatform CI - Windows\",\"description\":\"Windows tests\", \"target_url\": \"$WORKFLOW_URL\"}"

                    # Post status for macOS
                    curl -X POST \
                      -H "Authorization: Bearer $GITHUB_TOKEN" \
                      -H "Accept: application/vnd.github+json" \
                      https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }} \
                      -d "{\"state\":\"pending\",\"context\":\"Manual MultiPlatform CI - macOS\",\"description\":\"macOS tests\", \"target_url\": \"$WORKFLOW_URL\"}"
    
    # ---------------------------------------------------------------------------------------
    # Linux (Full Desktop Environment)
    # ---------------------------------------------------------------------------------------
    linux-gui:
        if: ${{ github.event.inputs.run_linux == 'true' }}
        needs: mark-pending
        name: Test - Linux
        runs-on: ubuntu-latest
        permissions:
            statuses: write
        steps:
            -   uses: actions/checkout@v5
                with:
                    ref: refs/pull/${{ github.event.inputs.pr_number }}/merge

            -   name: Setup .NET 9 SDK
                uses: actions/setup-dotnet@v5
                with:
                    dotnet-version: '9.x'
            
            # Cache APT packages to avoid re-downloading
            -   name: Cache APT packages
                uses: actions/cache@v4
                with:
                    path: |
                        /var/cache/apt/archives
                        /var/lib/apt/lists
                    key: ${{ runner.os }}-apt-${{ hashFiles('**/onPullRequest-multiPlatformTesting.yml') }}
                    restore-keys: |
                        ${{ runner.os }}-apt-
            
            # Cache .NET packages
            -   name: Cache .NET packages
                uses: actions/cache@v4
                with:
                    path: ~/.nuget/packages
                    key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/*.props') }}
                    restore-keys: |
                        ${{ runner.os }}-nuget-
            
            # Cache .NET build output
            -   name: Cache .NET build
                uses: actions/cache@v4
                with:
                    path: |
                        **/bin
                        **/obj
                    key: ${{ runner.os }}-build-${{ hashFiles('**/*.cs', '**/*.csproj', '**/*.props') }}
                    restore-keys: |
                        ${{ runner.os }}-build-

            -   name: Setup CMake
                uses: lukka/get-cmake@latest

            -   name: Install desktop environment and dependencies
                run: |
                    # Update package lists
                    sudo apt-get update
                    
                    export DEBIAN_FRONTEND=noninteractive
                    sudo apt-get install -y \
                        gnome-shell \
                        gnome-session \
                        gnome-settings-daemon \
                        mutter \
                        xvfb \
                        x11-utils \
                        x11-xserver-utils \
                        dbus-x11 \
                        at-spi2-core \
                        gsettings-desktop-schemas \
                        libnotify4 \
                        libnotify-dev \
                        libwebkit2gtk-4.1-dev \
                        libgtk-3-dev \
                        libglib2.0-dev \
                        libgdk-pixbuf2.0-dev \
                        libpango1.0-dev \
                        libatk1.0-dev \
                        libharfbuzz-dev \
                        libepoxy-dev \
                        libx11-dev \
                        fonts-liberation \
                        xfonts-base

            -   name: Restore dependencies
                run: dotnet restore InfiniLore.InfiniFrame.GitHubActions.Linux.slnf /p:NoWarn=NU1503

            -   name: Build (Release)
                run: |
                    # Build native project first
                    dotnet build src/InfiniLore.InfiniFrame.Native/InfiniLore.InfiniFrame.Native.proj \
                      --configuration Release \
                      --no-restore \
                      /p:SolutionDir=$GITHUB_WORKSPACE/
                    
                    # Then build the rest of the solution
                    dotnet build InfiniLore.InfiniFrame.GitHubActions.Linux.slnf \
                      --configuration Release \
                      --no-restore

            -   name: Verify Native DLLs for testing
                run: |
                    nativeSo="tests/Tests.InfiniFrame/bin/Release/net9.0/InfiniLore.InfiniFrame.Native.so"

                    if [ ! -f "$nativeSo" ]; then
                        echo "ERROR: InfiniLore.InfiniFrame.Native.so NOT found in test output!"
                        exit 1
                    fi
                    
                    echo "✅ All native DLLs present"

            -   name: Start desktop environment and run tests
                run: |
                    echo "Starting desktop environment..."
                    
                    # Start D-Bus session (fixed syntax)
                    eval $(dbus-launch --sh-syntax)
                    
                    # Start Xvfb
                    Xvfb :99 \
                        -screen 0 1920x1080x24 \
                        -ac \
                        +extension GLX \
                        +extension RANDR \
                        +extension RENDER \
                        -nolisten tcp \
                        -noreset &
                    
                    export DISPLAY=:99
                    export XDG_RUNTIME_DIR="/tmp/runtime-$USER"
                    export XDG_SESSION_TYPE=x11
                    export XDG_SESSION_CLASS=user
                    export XDG_SESSION_DESKTOP=ubuntu
                    export XDG_CURRENT_DESKTOP=ubuntu:GNOME
                    export DESKTOP_SESSION=ubuntu
                    
                    # Create runtime directory
                    mkdir -p "$XDG_RUNTIME_DIR"
                    chmod 700 "$XDG_RUNTIME_DIR"
                    
                    # Wait for X server
                    echo "Waiting for X server..."
                    timeout 30 bash -c 'until xdpyinfo >/dev/null 2>&1; do sleep 1; done' || {
                        echo "X server failed to start"
                        exit 1
                    }
                    
                    # Start GNOME settings daemon
                    gnome-settings-daemon &
                    sleep 2
                    
                    # Start Mutter window manager
                    echo "Starting Mutter window manager..."
                    mutter --replace &
                    sleep 8
                    
                    # Verify setup
                    echo "=== Environment Status ==="
                    echo "Display: $DISPLAY"
                    echo "Desktop: $XDG_CURRENT_DESKTOP"
                    echo "Session: $XDG_SESSION_DESKTOP"
                    echo "D-Bus: $DBUS_SESSION_BUS_ADDRESS"
                    
                    echo "X11 info:"
                    xdpyinfo | head -3 || echo "xdpyinfo failed"
                    
                    echo "Window manager:"
                    ps aux | grep mutter | grep -v grep || echo "Mutter not found"
                    
                    # Test window capabilities
                    echo "Testing window manager capabilities..."
                    timeout 5 xwininfo -root >/dev/null 2>&1 && echo "Window manager responding" || echo "Window manager not responding"
                    
                    echo "=== Running Tests ==="
                    dotnet test InfiniLore.InfiniFrame.GitHubActions.Linux.slnf \
                        --configuration Release \
                        --no-build \
                        --no-restore

            -   name: Display test logs on failure
                if: failure()
                run: |
                    echo "=== Test Run Failed - Displaying Logs ==="
                    
                    # Function to strip ANSI escape codes for readability
                    strip_ansi() {
                        sed 's/\x1B\[[0-9;]*[a-zA-Z]//g'
                    }
                    
                    find . -name "*.log" -path "*/TestResults/*" -type f | while read logfile; do
                        echo "=== Content of $logfile ==="
                        cat "$logfile" | strip_ansi || echo "Could not read $logfile"
                        echo ""
                    done
                    
                    find . -name "*.trx" -path "*/TestResults/*" -type f | while read trxfile; do
                        echo "=== Content of $trxfile ==="
                        cat "$trxfile" | strip_ansi || echo "Could not read $trxfile"
                        echo ""
                    done
                    
                    echo "=== All files in TestResults directories ==="
                    find . -path "*/TestResults/*" -type f -ls || echo "No TestResults directories found"

            -   name: Upload test results as artifact
                if: failure()
                uses: actions/upload-artifact@v4
                with:
                    name: test-logs
                    path: |
                        **/TestResults/*.log
                        **/TestResults/*.trx

            -   name: Update Linux status
                if: always()
                env:
                    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                run: |
                    if [ "${{ job.status }}" == "success" ]; then
                        STATUS="success"
                        DESCRIPTION="Linux tests passed"
                    else
                        STATUS="failure"
                        DESCRIPTION="Linux tests failed"
                    fi
                    
                    # Construct the workflow run URL
                    WORKFLOW_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    
                    curl -X POST \
                      -H "Authorization: Bearer $GITHUB_TOKEN" \
                      -H "Accept: application/vnd.github+json" \
                      https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }} \
                      -d "{\"state\":\"$STATUS\",\"context\":\"Manual MultiPlatform CI - Linux\",\"description\":\"$DESCRIPTION\",\"target_url\":\"$WORKFLOW_URL\"}"

    # ---------------------------------------------------------------------------------------
    # Windows
    # ---------------------------------------------------------------------------------------
    windows-gui:
        if: ${{ github.event.inputs.run_windows == 'true' }}
        needs: mark-pending
        name: Test - Windows
        runs-on: windows-latest
        permissions:
            statuses: write

        steps:
            -   name: Checkout repository
                uses: actions/checkout@v5
                with:
                    ref: refs/pull/${{ github.event.inputs.pr_number }}/merge

            -   name: Setup .NET 9 SDK
                uses: actions/setup-dotnet@v5
                with:
                    dotnet-version: '9.x'

            -   name: Setup CMake
                uses: lukka/get-cmake@latest
                with:
                    cmakeVersion: "4.0.0"

            -   name: Restore dependencies
                run: dotnet restore InfiniLore.InfiniFrame.GitHubActions.Windows.slnf /p:NoWarn=NU1503

            -   name: Build (Release)
                run: |
                    # Build native project first
                    dotnet build src/InfiniLore.InfiniFrame.Native/InfiniLore.InfiniFrame.Native.proj `
                        --configuration Release `
                        --no-restore `
                        /p:SolutionDir=$GITHUB_WORKSPACE/
                    
                    # Then build the rest of the solution
                    dotnet build InfiniLore.InfiniFrame.GitHubActions.Windows.slnf `
                        --configuration Release `
                        --no-restore

            -   name: Verify Native DLLs for testing
                run: |
                    $nativeDll = "tests/Tests.InfiniFrame/bin/Release/net9.0/InfiniLore.InfiniFrame.Native.dll"
                    $webView2 = "tests/Tests.InfiniFrame/bin/Release/net9.0/WebView2Loader.dll"
                    
                    if (-Not (Test-Path $nativeDll)) {
                        Write-Host "ERROR: InfiniLore.InfiniFrame.Native.dll NOT found in test output!"
                        Exit 1
                    }
                    
                    if (-Not (Test-Path $webView2)) {
                        Write-Host "ERROR: WebView2Loader.dll NOT found in test output!"
                        Exit 1
                    }
                    
                    Write-Host "✅ All native DLLs present"

            -   name: Run tests
                run: |
                    echo "Running tests on Windows..."
                    dotnet test InfiniLore.InfiniFrame.GitHubActions.Windows.slnf `
                      --configuration Release `
                      --no-build `
                      --no-restore

            -   name: Update Windows status
                if: always()
                env:
                    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                run: |
                    if ("${{ job.status }}" -eq "success") {
                        $STATUS = "success"
                        $DESCRIPTION = "Windows tests passed"
                    } else {
                        $STATUS = "failure"
                        $DESCRIPTION = "Windows tests failed"
                    }
                    
                    # Construct the workflow run URL
                    $WORKFLOW_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    
                    $body = @{
                        state = $STATUS
                        context = "Manual MultiPlatform CI - Windows"
                        description = $DESCRIPTION
                        target_url = $WORKFLOW_URL
                    } | ConvertTo-Json
                    
                    Invoke-RestMethod -Uri "https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }}" `
                        -Method POST `
                        -Headers @{
                            "Authorization" = "Bearer $env:GITHUB_TOKEN"
                            "Accept" = "application/vnd.github+json"
                        } `
                        -Body $body `
                        -ContentType "application/json"

    windows-playwright:
        if: ${{ github.event.inputs.run_windows_playwright == 'true' }}
        needs: mark-pending
        name: Test - Windows Playwright
        runs-on: windows-latest
        permissions:
            statuses: write

        steps:
            -   name: Checkout repository
                uses: actions/checkout@v5
                with:
                    ref: refs/pull/${{ github.event.inputs.pr_number }}/merge

            -   name: Setup .NET 9 SDK
                uses: actions/setup-dotnet@v5
                with:
                    dotnet-version: '9.x'

            -   name: Setup CMake
                uses: lukka/get-cmake@latest
                with:
                    cmakeVersion: "4.0.0"

            -   name: Restore dependencies
                run: dotnet restore InfiniLore.InfiniFrame.GitHubActions.WindowsPlaywright.slnf /p:NoWarn=NU1503

            -   name: Build (Release)
                run: |
                    dotnet build src/InfiniLore.InfiniFrame.Native/InfiniLore.InfiniFrame.Native.proj `
                        --configuration Release `
                        --no-restore `
                        /p:SolutionDir=$GITHUB_WORKSPACE/

                    dotnet build InfiniLore.InfiniFrame.GitHubActions.WindowsPlaywright.slnf `
                        --configuration Release `
                        --no-restore

            -   name: Ensure browsers are installed for Playwright
                working-directory: tests/Tests.InfiniFrame.Playwright
                run: pwsh bin/Release/net9.0/playwright.ps1 install

            -   name: Verify Native DLLs for testing
                run: |
                    $nativeDll = "tests/Tests.InfiniFrame.Playwright/bin/Release/net9.0/InfiniLore.InfiniFrame.Native.dll"
                    $webView2 = "tests/Tests.InfiniFrame.Playwright/bin/Release/net9.0/WebView2Loader.dll"
                    
                    if (-Not (Test-Path $nativeDll)) {
                        Write-Host "ERROR: InfiniLore.InfiniFrame.Native.dll NOT found in test output!"
                        Exit 1
                    }
                    
                    if (-Not (Test-Path $webView2)) {
                        Write-Host "ERROR: WebView2Loader.dll NOT found in test output!"
                        Exit 1
                    }
                    
                    Write-Host "✅ All native DLLs present"

            -   name: Run Playwright tests (.NET)
                run: |
                    echo "Running Playwright tests on Windows..."
                    dotnet test tests/Tests.InfiniFrame.Playwright/Tests.InfiniFrame.Playwright.csproj `
                        --configuration Release `
                        --no-build `
                        --no-restore

            -   name: Upload Playwright test results
                if: always()
                uses: actions/upload-artifact@v4
                with:
                    name: playwright-test-results
                    path: tests/Tests.InfiniFrame.Playwright/TestResults

            -   name: Update Windows Playwright status
                if: always()
                env:
                    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                run: |
                    if ("${{ job.status }}" -eq "success") {
                        $STATUS = "success"
                        $DESCRIPTION = "Windows Playwright tests passed"
                    } else {
                        $STATUS = "failure"
                        $DESCRIPTION = "Windows Playwright tests failed"
                    }

                    $WORKFLOW_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

                    $body = @{
                        state = $STATUS
                        context = "Manual MultiPlatform CI - Windows Playwright"
                        description = $DESCRIPTION
                        target_url = $WORKFLOW_URL
                    } | ConvertTo-Json

                    Invoke-RestMethod -Uri "https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }}" `
                        -Method POST `
                        -Headers @{
                            "Authorization" = "Bearer $env:GITHUB_TOKEN"
                            "Accept" = "application/vnd.github+json"
                        } `
                        -Body $body `
                        -ContentType "application/json"
    
    
    # ---------------------------------------------------------------------------------------
    # macOS
    # ---------------------------------------------------------------------------------------
    macos-gui:
        if: ${{ github.event.inputs.run_macos == 'true' }}
        needs: mark-pending
        name: Test - macOS
        runs-on: macos-latest
        permissions:
            statuses: write
        
        steps:
            -   name: Checkout repository
                uses: actions/checkout@v5
                with:
                    ref: refs/pull/${{ github.event.inputs.pr_number }}/merge

            -   name: Setup .NET 9 SDK
                uses: actions/setup-dotnet@v5
                with:
                    dotnet-version: '9.x'
            
            # Cache .NET packages
            -   name: Cache .NET packages
                uses: actions/cache@v4
                with:
                    path: ~/.nuget/packages
                    key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/*.props') }}
                    restore-keys: |
                        ${{ runner.os }}-nuget-
            
            # Cache .NET build output
            -   name: Cache .NET build
                uses: actions/cache@v4
                with:
                    path: |
                        **/bin
                        **/obj
                    key: ${{ runner.os }}-build-${{ hashFiles('**/*.cs', '**/*.csproj', '**/*.props') }}
                    restore-keys: |
                        ${{ runner.os }}-build-

            -   name: Restore dependencies
                run: dotnet restore InfiniLore.InfiniFrame.GitHubActions.MacOs.slnf /p:NoWarn=NU1503

            -   name: Build native
                run: |
                    dotnet build src/InfiniLore.InfiniFrame.Native/InfiniLore.InfiniFrame.Native.proj \
                        --configuration Release \
                        --no-restore \
                        /p:SolutionDir=$GITHUB_WORKSPACE/

            -   name: Build (Release)
                run: dotnet build InfiniLore.InfiniFrame.GitHubActions.MacOs.slnf --configuration Release --no-restore

            -   name: Verify Native DLLs for testing
                run: |
                    nativeSo="tests/Tests.InfiniFrame/bin/Release/net9.0/InfiniLore.InfiniFrame.Native.dylib"

                    if [ ! -f "$nativeSo" ]; then
                        echo "ERROR: InfiniLore.InfiniFrame.Native.dylib  NOT found in test output!"
                        exit 1
                    fi
                    
                    echo "✅ All native DLLs present"

            -   name: Setup GUI environment and run tests
                run: |
                    echo "Setting up macOS GUI environment..."

                    # Verify setup
                    echo "=== Environment Status ==="
                    echo "System: $(sw_vers -productName) $(sw_vers -productVersion)"
                    echo "Architecture: $(uname -m)"
                    echo "Running in native macOS mode"

                    # Set environment variables for macOS GUI testing
                    export OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES
                    export NSUnbufferedIO=YES

                    echo "=== Running Tests ==="

                    # Run tests
                    dotnet test InfiniLore.InfiniFrame.GitHubActions.MacOs.slnf \
                        --configuration Release \
                        --no-build \
                        --no-restore \
                        --logger "console;verbosity=detailed"

            -   name: Update macOS status
                if: always()
                env:
                    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                run: |
                    if [ "${{ job.status }}" == "success" ]; then
                        STATUS="success"
                        DESCRIPTION="macOS tests passed"
                    else
                        STATUS="failure"
                        DESCRIPTION="macOS tests failed"
                    fi
                    
                    # Construct the workflow run URL
                    WORKFLOW_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    
                    curl -X POST \
                      -H "Authorization: Bearer $GITHUB_TOKEN" \
                      -H "Accept: application/vnd.github+json" \
                      https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }} \
                      -d "{\"state\":\"$STATUS\",\"context\":\"Manual MultiPlatform CI - macOS\",\"description\":\"$DESCRIPTION\",\"target_url\":\"$WORKFLOW_URL\"}"

    # ---------------------------------------------------------------------------------------
    # Handle skipped platforms
    # ---------------------------------------------------------------------------------------
    mark-skipped:
        name: Mark Skipped Platforms
        runs-on: ubuntu-latest
        needs: mark-pending
        permissions:
            statuses: write
        steps:
            -   name: Mark skipped platform statuses
                env:
                    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                run: |
                    # Construct the workflow run URL
                    WORKFLOW_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    
                    # Mark Linux as skipped if not enabled
                    if [[ "${{ github.event.inputs.run_linux }}" != "true" ]]; then
                        curl -X POST \
                          -H "Authorization: Bearer $GITHUB_TOKEN" \
                          -H "Accept: application/vnd.github+json" \
                          https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }} \
                          -d '{"state":"success","context":"Manual MultiPlatform CI - Linux","description":"skipped","target_url":"$WORKFLOW_URL"}'
                    fi
                    
                    # Mark Windows as skipped if not enabled
                    if [[ "${{ github.event.inputs.run_windows }}" != "true" ]]; then
                        curl -X POST \
                          -H "Authorization: Bearer $GITHUB_TOKEN" \
                          -H "Accept: application/vnd.github+json" \
                          https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }} \
                          -d '{"state":"success","context":"Manual MultiPlatform CI - Windows","description":"skipped","target_url":"$WORKFLOW_URL"}'
                    fi
                    
                    # Mark macOS as skipped if not enabled
                    if [[ "${{ github.event.inputs.run_macos }}" != "true" ]]; then
                        curl -X POST \
                          -H "Authorization: Bearer $GITHUB_TOKEN" \
                          -H "Accept: application/vnd.github+json" \
                          https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }} \
                          -d '{"state":"success","context":"Manual MultiPlatform CI - macOS","description":"skipped","target_url":"$WORKFLOW_URL"}'
                    fi