name: MultiPlatform Testing

on:
    workflow_dispatch:
    pull_request:
        types: [ opened, synchronize, reopened, ready_for_review ]
        branches: [ master ]

jobs:
    # ---------------------------------------------------------------------------------------
    # Linux (Headless)
    # ---------------------------------------------------------------------------------------
    linux-gui:
        name: Build & Test - Linux
        runs-on: ubuntu-latest
        steps:
            -   uses: actions/checkout@v5

            -   name: Setup .NET 9 SDK
                uses: actions/setup-dotnet@v4
                with:
                    dotnet-version: '9.x'
            
            # Cache APT packages to avoid re-downloading
            -   name: Cache APT packages
                uses: actions/cache@v4
                with:
                    path: |
                        /var/cache/apt/archives
                        /var/lib/apt/lists
                    key: ${{ runner.os }}-apt-${{ hashFiles('**/onPullRequest-multiPlatformTesting.yml') }}
                    restore-keys: |
                        ${{ runner.os }}-apt-
            
            # Cache .NET packages
            -   name: Cache .NET packages
                uses: actions/cache@v4
                with:
                    path: ~/.nuget/packages
                    key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/*.props') }}
                    restore-keys: |
                        ${{ runner.os }}-nuget-
            
            # Cache .NET build output
            -   name: Cache .NET build
                uses: actions/cache@v4
                with:
                    path: |
                        **/bin
                        **/obj
                    key: ${{ runner.os }}-build-${{ hashFiles('**/*.cs', '**/*.csproj', '**/*.props') }}
                    restore-keys: |
                        ${{ runner.os }}-build-

            -   name: Install full GNOME desktop environment
                run: |
                    # Update package lists only if cache miss
                    if [ ! -f "/var/lib/apt/lists/lock" ]; then
                        sudo apt-get update
                    fi

                    export DEBIAN_FRONTEND=noninteractive
                    sudo apt-get install -y \
                        ubuntu-desktop-minimal \
                        gnome-shell \
                        gnome-session \
                        gnome-settings-daemon \
                        gnome-control-center \
                        mutter \
                        xvfb \
                        x11-utils \
                        x11-xserver-utils \
                        dbus-x11 \
                        at-spi2-core \
                        gconf-service \
                        libnotify4 \
                        libwebkit2gtk-4.1-dev \
                        libgtk-3-dev \
                        libglib2.0-dev \
                        libgdk-pixbuf2.0-dev \
                        libpango1.0-dev \
                        libatk1.0-dev \
                        libharfbuzz-dev \
                        libepoxy-dev \
                        libx11-dev \
                        fonts-liberation \
                        xfonts-base

            -   name: Restore dependencies (cached)
                run: dotnet restore InfiniLore.Photino.GitHubActions.slnf

            -   name: Build (Release) (cached)
                run: dotnet build InfiniLore.Photino.GitHubActions.slnf --configuration Release --no-restore

            -   name: Start full GNOME desktop and run tests
                run: |
                    echo "Starting full GNOME desktop environment..."

                    # Start system D-Bus
                    sudo systemctl start dbus
                    export $(dbus-launch --sh-syntax)

                    # Start Xvfb with comprehensive settings
                    Xvfb :99 \
                        -screen 0 1920x1080x24 \
                        -ac \
                        +extension GLX \
                        +extension RANDR \
                        +extension RENDER \
                        -nolisten tcp \
                        -noreset \
                        -shmem &

                    export DISPLAY=:99
                    export XDG_RUNTIME_DIR="/tmp/runtime-$USER"
                    export XDG_SESSION_TYPE=x11
                    export XDG_SESSION_CLASS=user
                    export XDG_SESSION_DESKTOP=gnome
                    export XDG_CURRENT_DESKTOP=GNOME
                    export GNOME_DESKTOP_SESSION_ID=this-is-deprecated
                    export DESKTOP_SESSION=gnome

                    # Create runtime directory
                    mkdir -p "$XDG_RUNTIME_DIR"
                    chmod 700 "$XDG_RUNTIME_DIR"

                    # Wait for X server to be ready
                    echo "Waiting for X server..."
                    timeout 30 bash -c 'until xdpyinfo >/dev/null 2>&1; do sleep 1; done' || {
                        echo "X server failed to start"
                        exit 1
                    }

                    # Start GNOME settings daemon
                    /usr/libexec/gnome-settings-daemon &
                    sleep 2

                    # Start Mutter/GNOME Shell in nested mode
                    echo "Starting GNOME Shell/Mutter..."
                    mutter --wayland --nested --no-x11 &
                    MUTTER_PID=$!

                    # Wait for window manager to be ready
                    sleep 10

                    # Verify setup
                    echo "=== Desktop Environment Status ==="
                    echo "X11 Display: $DISPLAY"
                    echo "XDG Runtime: $XDG_RUNTIME_DIR"
                    echo "Current Desktop: $XDG_CURRENT_DESKTOP"

                    echo "X11 info:"
                    xdpyinfo | head -5 || echo "xdpyinfo failed"

                    echo "Window manager processes:"
                    ps aux | grep -E "(mutter|gnome)" | grep -v grep || echo "No GNOME processes found"

                    echo "D-Bus session:"
                    echo $DBUS_SESSION_BUS_ADDRESS

                    # Test window manager capabilities
                    echo "Testing window manager..."
                    timeout 5 xwininfo -root >/dev/null 2>&1 && echo "Window manager responding" || echo "Window manager not responding"

                    echo "=== Running Tests ==="
                    dotnet test InfiniLore.Photino.GitHubActions.slnf \
                    --configuration Release \
                    --no-build \
                    --no-restore \
                    --logger "console;verbosity=detailed" || {
                        echo "=== Test Failure Debug Info ==="
                        echo "Processes still running:"
                        ps aux | grep -E "(Xvfb|mutter|gnome|dotnet)" | grep -v grep
                        echo "X11 status:"
                        xdpyinfo | head -10 || echo "X11 not responding"
                        exit 1
                    }

    # ---------------------------------------------------------------------------------------
    # Windows
    # ---------------------------------------------------------------------------------------
    windows-gui:
        name: Build & Test - Windows
        runs-on: windows-latest

        steps:
            - name: Checkout repository
              uses: actions/checkout@v5

            - name: Setup .NET 9 SDK
              uses: actions/setup-dotnet@v4
              with:
                  dotnet-version: '9.x'

            - name: Restore dependencies
              run: dotnet restore InfiniLore.Photino.GitHubActions.slnf

            - name: Build (Release)
              run: |
                  dotnet build InfiniLore.Photino.GitHubActions.slnf `
                    --configuration Release `
                    --no-restore `
                    -p:GeneratePackageOnBuild=false `
                    -p:IsPackable=false

            - name: Run tests
              run: |
                  echo "Running tests on Windows..."
                  dotnet test InfiniLore.Photino.GitHubActions.slnf `
                    --configuration Release `
                    --no-build `
                    --no-restore `
                    --logger "console;verbosity=detailed"
