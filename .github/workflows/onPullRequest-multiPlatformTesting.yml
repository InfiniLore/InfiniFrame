name: MultiPlatform Testing

on:
    workflow_dispatch:
        inputs:
            pr_number:
                description: 'PR number to test (use the PR number from the URL)'
                required: false
            run_linux:
                description: 'Run Linux GUI tests'
                type: boolean
                default: true
            run_windows:
                description: 'Run Windows GUI tests'
                type: boolean
                default: true
            run_macos:
                description: 'Run macOS GUI tests'
                type: boolean
                default: false

jobs:
    mark-pending:
        name: Mark Manual CI as Pending
        runs-on: ubuntu-latest
        permissions:
            statuses: write
        steps:
            -   name: Set pending status
                env:
                    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                run: |
                    
                    
                    echo "Posting pending status for Manual MultiPlatform CI"
                    
                    # Post status for Linux
                    curl -X POST \
                      -H "Authorization: Bearer $GITHUB_TOKEN" \
                      -H "Accept: application/vnd.github+json" \
                      https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }} \
                      -d "{\"state\":\"pending\",\"context\":\"Manual MultiPlatform CI - Linux\",\"description\":\"Linux tests\"}"

                    # Post status for Windows  
                    curl -X POST \
                      -H "Authorization: Bearer $GITHUB_TOKEN" \
                      -H "Accept: application/vnd.github+json" \
                      https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }} \
                      -d "{\"state\":\"pending\",\"context\":\"Manual MultiPlatform CI - Windows\",\"description\":\"Windows tests\"}"

                    # Post status for macOS
                    curl -X POST \
                      -H "Authorization: Bearer $GITHUB_TOKEN" \
                      -H "Accept: application/vnd.github+json" \
                      https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }} \
                      -d "{\"state\":\"pending\",\"context\":\"Manual MultiPlatform CI - macOS\",\"description\":\"macOS tests\"}"
    
    # ---------------------------------------------------------------------------------------
    # Linux (Full Desktop Environment)
    # ---------------------------------------------------------------------------------------
    linux-gui:
        if: ${{ github.event.inputs.run_linux == 'true' }}
        needs: mark-pending
        name: Build & Test - Linux
        runs-on: ubuntu-latest
        steps:
            -   uses: actions/checkout@v5
                with:
                    ref: refs/pull/${{ github.event.inputs.pr_number }}/merge

            -   name: Setup .NET 9 SDK
                uses: actions/setup-dotnet@v4
                with:
                    dotnet-version: '9.x'
            
            # Cache APT packages to avoid re-downloading
            -   name: Cache APT packages
                uses: actions/cache@v4
                with:
                    path: |
                        /var/cache/apt/archives
                        /var/lib/apt/lists
                    key: ${{ runner.os }}-apt-${{ hashFiles('**/onPullRequest-multiPlatformTesting.yml') }}
                    restore-keys: |
                        ${{ runner.os }}-apt-
            
            # Cache .NET packages
            -   name: Cache .NET packages
                uses: actions/cache@v4
                with:
                    path: ~/.nuget/packages
                    key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/*.props') }}
                    restore-keys: |
                        ${{ runner.os }}-nuget-
            
            # Cache .NET build output
            -   name: Cache .NET build
                uses: actions/cache@v4
                with:
                    path: |
                        **/bin
                        **/obj
                    key: ${{ runner.os }}-build-${{ hashFiles('**/*.cs', '**/*.csproj', '**/*.props') }}
                    restore-keys: |
                        ${{ runner.os }}-build-

            -   name: Install desktop environment and dependencies
                run: |
                    # Update package lists
                    sudo apt-get update
                    
                    export DEBIAN_FRONTEND=noninteractive
                    sudo apt-get install -y \
                        gnome-shell \
                        gnome-session \
                        gnome-settings-daemon \
                        mutter \
                        xvfb \
                        x11-utils \
                        x11-xserver-utils \
                        dbus-x11 \
                        at-spi2-core \
                        gsettings-desktop-schemas \
                        libnotify4 \
                        libwebkit2gtk-4.1-dev \
                        libgtk-3-dev \
                        libglib2.0-dev \
                        libgdk-pixbuf2.0-dev \
                        libpango1.0-dev \
                        libatk1.0-dev \
                        libharfbuzz-dev \
                        libepoxy-dev \
                        libx11-dev \
                        fonts-liberation \
                        xfonts-base

            -   name: Restore dependencies (cached)
                run: dotnet restore InfiniLore.Photino.GitHubActions.slnf

            -   name: Build (Release) (cached)
                run: dotnet build InfiniLore.Photino.GitHubActions.slnf --configuration Release --no-restore

            -   name: Start desktop environment and run tests
                run: |
                    echo "Starting desktop environment..."
                    
                    # Start D-Bus session (fixed syntax)
                    eval $(dbus-launch --sh-syntax)
                    
                    # Start Xvfb
                    Xvfb :99 \
                        -screen 0 1920x1080x24 \
                        -ac \
                        +extension GLX \
                        +extension RANDR \
                        +extension RENDER \
                        -nolisten tcp \
                        -noreset &
                    
                    export DISPLAY=:99
                    export XDG_RUNTIME_DIR="/tmp/runtime-$USER"
                    export XDG_SESSION_TYPE=x11
                    export XDG_SESSION_CLASS=user
                    export XDG_SESSION_DESKTOP=ubuntu
                    export XDG_CURRENT_DESKTOP=ubuntu:GNOME
                    export DESKTOP_SESSION=ubuntu
                    
                    # Create runtime directory
                    mkdir -p "$XDG_RUNTIME_DIR"
                    chmod 700 "$XDG_RUNTIME_DIR"
                    
                    # Wait for X server
                    echo "Waiting for X server..."
                    timeout 30 bash -c 'until xdpyinfo >/dev/null 2>&1; do sleep 1; done' || {
                        echo "X server failed to start"
                        exit 1
                    }
                    
                    # Start GNOME settings daemon
                    gnome-settings-daemon &
                    sleep 2
                    
                    # Start Mutter window manager
                    echo "Starting Mutter window manager..."
                    mutter --replace &
                    sleep 8
                    
                    # Verify setup
                    echo "=== Environment Status ==="
                    echo "Display: $DISPLAY"
                    echo "Desktop: $XDG_CURRENT_DESKTOP"
                    echo "Session: $XDG_SESSION_DESKTOP"
                    echo "D-Bus: $DBUS_SESSION_BUS_ADDRESS"
                    
                    echo "X11 info:"
                    xdpyinfo | head -3 || echo "xdpyinfo failed"
                    
                    echo "Window manager:"
                    ps aux | grep mutter | grep -v grep || echo "Mutter not found"
                    
                    # Test window capabilities
                    echo "Testing window manager capabilities..."
                    timeout 5 xwininfo -root >/dev/null 2>&1 && echo "✓ Window manager responding" || echo "✗ Window manager not responding"
                    
                    echo "=== Running Tests ==="
                    dotnet test InfiniLore.Photino.GitHubActions.slnf \
                        --configuration Release \
                        --no-build \
                        --no-restore \
                        --logger "console;verbosity=detailed"

    # ---------------------------------------------------------------------------------------
    # Windows
    # ---------------------------------------------------------------------------------------
    windows-gui:
        if: ${{ github.event.inputs.run_windows == 'true' }}
        needs: mark-pending
        name: Build & Test - Windows
        runs-on: windows-latest

        steps:
            - name: Checkout repository
              uses: actions/checkout@v5
              with:
                  ref: refs/pull/${{ github.event.inputs.pr_number }}/merge

            - name: Setup .NET 9 SDK
              uses: actions/setup-dotnet@v4
              with:
                  dotnet-version: '9.x'

            - name: Restore dependencies
              run: dotnet restore InfiniLore.Photino.GitHubActions.slnf

            - name: Build (Release)
              run: |
                  dotnet build InfiniLore.Photino.GitHubActions.slnf `
                    --configuration Release `
                    --no-restore `
                    -p:GeneratePackageOnBuild=false `
                    -p:IsPackable=false

            - name: Run tests
              run: |
                  echo "Running tests on Windows..."
                  dotnet test InfiniLore.Photino.GitHubActions.slnf `
                    --configuration Release `
                    --no-build `
                    --no-restore `
                    --logger "console;verbosity=detailed"

    # ---------------------------------------------------------------------------------------
    # macOS
    # ---------------------------------------------------------------------------------------
    macos-gui:
        if: ${{ github.event.inputs.run_macos == 'true' }}
        needs: mark-pending
        name: Build & Test - macOS
        runs-on: macos-latest
        
        steps:
            -   name: Checkout repository
                uses: actions/checkout@v5
                with:
                    ref: refs/pull/${{ github.event.inputs.pr_number }}/merge

            -   name: Setup .NET 9 SDK
                uses: actions/setup-dotnet@v4
                with:
                    dotnet-version: '9.x'
            
            # Cache .NET packages
            -   name: Cache .NET packages
                uses: actions/cache@v4
                with:
                    path: ~/.nuget/packages
                    key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/*.props') }}
                    restore-keys: |
                        ${{ runner.os }}-nuget-
            
            # Cache .NET build output
            -   name: Cache .NET build
                uses: actions/cache@v4
                with:
                    path: |
                        **/bin
                        **/obj
                    key: ${{ runner.os }}-build-${{ hashFiles('**/*.cs', '**/*.csproj', '**/*.props') }}
                    restore-keys: |
                        ${{ runner.os }}-build-

            -   name: Restore dependencies (cached)
                run: dotnet restore InfiniLore.Photino.GitHubActions.slnf

            -   name: Build (Release) (cached)
                run: dotnet build InfiniLore.Photino.GitHubActions.slnf --configuration Release --no-restore

            -   name: Setup GUI environment and run tests
                run: |
                    echo "Setting up macOS GUI environment..."

                    # Verify setup
                    echo "=== Environment Status ==="
                    echo "System: $(sw_vers -productName) $(sw_vers -productVersion)"
                    echo "Architecture: $(uname -m)"
                    echo "Running in native macOS mode"

                    # Set environment variables for macOS GUI testing
                    export OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES
                    export NSUnbufferedIO=YES

                    echo "=== Running Tests with main thread enforcement ==="

                    # Run tests with explicit main thread handling
                    # The key is using the synchronization context properly
                    dotnet test InfiniLore.Photino.GitHubActions.slnf \
                        --configuration Release \
                        --no-build \
                        --no-restore \
                        --logger "console;verbosity=detailed"

    update-status:
        name: Update Manual CI Status
        runs-on: ubuntu-latest
        needs: [ linux-gui, windows-gui, macos-gui ]
        if: always()
        permissions:
            statuses: write
        steps:
            -   name: Post status for all platforms
                env:
                    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                run: |
                    # Function to determine status based on job result and whether it was enabled
                    get_platform_status() {
                        local job_result=$1
                        local was_enabled=$2

                        if [[ "$was_enabled" != "true" ]]; then
                            echo "success|skipped"
                        elif [[ "$job_result" == "success" ]]; then
                            echo "success|passed"
                        elif [[ "$job_result" == "skipped" ]]; then
                            echo "success|skipped"
                        else
                            echo "failure|failed"
                        fi
                    }

                    # Get status for each platform
                    LINUX_STATUS=$(get_platform_status "${{ needs.linux-gui.result }}" "${{ github.event.inputs.run_linux }}")
                    WINDOWS_STATUS=$(get_platform_status "${{ needs.windows-gui.result }}" "${{ github.event.inputs.run_windows }}")
                    MACOS_STATUS=$(get_platform_status "${{ needs.macos-gui.result }}" "${{ github.event.inputs.run_macos }}")

                    # Extract state and description for each platform
                    LINUX_STATE="${LINUX_STATUS%|*}"
                    LINUX_DESC="${LINUX_STATUS#*|}"
                    WINDOWS_STATE="${WINDOWS_STATUS%|*}"
                    WINDOWS_DESC="${WINDOWS_STATUS#*|}"
                    MACOS_STATE="${MACOS_STATUS%|*}"
                    MACOS_DESC="${MACOS_STATUS#*|}"

                    # Post status for Linux
                    curl -X POST \
                      -H "Authorization: Bearer $GITHUB_TOKEN" \
                      -H "Accept: application/vnd.github+json" \
                      https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }} \
                      -d "{\"state\":\"$LINUX_STATE\",\"context\":\"Manual MultiPlatform CI - Linux\",\"description\":\"Linux tests $LINUX_DESC\"}"

                    # Post status for Windows  
                    curl -X POST \
                      -H "Authorization: Bearer $GITHUB_TOKEN" \
                      -H "Accept: application/vnd.github+json" \
                      https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }} \
                      -d "{\"state\":\"$WINDOWS_STATE\",\"context\":\"Manual MultiPlatform CI - Windows\",\"description\":\"Windows tests $WINDOWS_DESC\"}"

                    # Post status for macOS
                    curl -X POST \
                      -H "Authorization: Bearer $GITHUB_TOKEN" \
                      -H "Accept: application/vnd.github+json" \
                      https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }} \
                      -d "{\"state\":\"$MACOS_STATE\",\"context\":\"Manual MultiPlatform CI - macOS\",\"description\":\"macOS tests $MACOS_DESC\"}"

                    echo "Posted status for all platforms:"
                    echo "- Linux: $LINUX_STATE ($LINUX_DESC)"
                    echo "- Windows: $WINDOWS_STATE ($WINDOWS_DESC)" 
                    echo "- macOS: $MACOS_STATE ($MACOS_DESC)"